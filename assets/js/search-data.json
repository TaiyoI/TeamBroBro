{
  
    
        "post0": {
            "title": "Algorithms and Logic",
            "content": "Algorithm . An algorithm typically means &#39;code&#39; that solves a problem. Designing an algorithm often requires you to learn the Tech first and then consider how you design your code and algorithms. Code design can take many iterations. . Truth Tables . My topic for this blog is Truth Tables. The illustration that follows displays the results of logical operators AND, OR, XOR, NOT versus binary 1 and 0. The output produces a &#39;Truth Table&#39;. . . Exploring Truth Tables operations . Exploration of this topic requires searching the language for logical operators, then figuring out how to display condition and test result. . Bitwise operations for Truth Tables typically represent 1 - True and 0 - False. | Logical expression in iteration and selection statements result in True or False | . My objective is Truth Tables. But in my exploration I did both Truth Table and Expression syntax . print(&quot;OR&quot;) print( &quot;1 | 0 = &quot;, 1 | 0) print( &quot;~(1 | 0) = &quot;, ~(1 | 0) % 2) # 1 is an integer, not a bit so remainder (modulo) does trick print(&quot;AND&quot;) print( &quot;1 &amp; 0 = &quot;, 1 &amp; 0) print( &quot;~(1 &amp; 0) = &quot;, ~(1 &amp; 0) % 2) # modulo again print(&quot;XOR&quot;) print( &quot;1 ^ 1 = &quot;, 1 ^ 1) print() # Boolean Tests print(&quot;Boolean OR&quot;) print( &quot;True or False = &quot;, True or False) print(&quot;Boolean AND&quot;) print( &quot;True and False = &quot;, True and False) print(&quot;Boolean XOR&quot;) print( &quot;True != True = &quot;, True != True) . OR 1 | 0 = 1 ~(1 | 0) = 0 AND 1 &amp; 0 = 0 ~(1 &amp; 0) = 1 XOR 1 ^ 1 = 0 Boolean OR True or False = True Boolean AND True and False = False Boolean XOR True != True = True . Algorithm 1 . This algorithm focuses on small reusable procedures/functions (def) for bitwise tests. From the exploratory experience above it seems like a lot of typing would be necessary to represent possibilities. . import operator # functions for all comparisons, logical operations, mathematical operations and sequence operations # builds truth table def truth_options(): a_opts = [1, 0] b_opts = [1, 0] return [(a, b) for a in a_opts for b in b_opts] # double for permutes options # provides equivalent function lookup for bitwise using operator functions def bitwise_options(op): ops = {&#39;&amp;&#39;: operator.and_, &#39;|&#39;: operator.or_, &#39;^&#39;: operator.xor} return ops[op] # control/eval for bitwise operators, selection is based on number of operators def bitwise_eval(op, op2=&quot;&quot;): if op2 == &quot;&quot;: op_func = bitwise_options(op) print(f&quot;Bitwise {op}&quot;) for a, b in truth_options(): print(f&quot;{a} {op} {b} is {op_func(a, b)}&quot;) else: op2_func = bitwise_options(op2) print(f&quot;Bitwise {op}&quot;) for a, b in truth_options(): print(f&quot;{op}({a} {op2} {b}) is {(1, 0)[op2_func(a, b)]}&quot;) # opposite: index 0 returns 1, index 1 return 0 def method1(): bitwise_eval(&quot;&amp;&quot;) bitwise_eval(&quot;NAND&quot;, &quot;&amp;&quot;) bitwise_eval(&quot;|&quot;) bitwise_eval(&quot;NOR&quot;, &quot;|&quot;) bitwise_eval(&quot;^&quot;) # call bitwise evaluation of truth table if __name__ == &quot;__main__&quot;: print(&quot;***** Method 1 *****&quot;) method1() . ***** Method 1 ***** Bitwise &amp; 1 &amp; 1 is 1 1 &amp; 0 is 0 0 &amp; 1 is 0 0 &amp; 0 is 0 Bitwise NAND NAND(1 &amp; 1) is 0 NAND(1 &amp; 0) is 1 NAND(0 &amp; 1) is 1 NAND(0 &amp; 0) is 1 Bitwise | 1 | 1 is 1 1 | 0 is 1 0 | 1 is 1 0 | 0 is 0 Bitwise NOR NOR(1 | 1) is 0 NOR(1 | 0) is 0 NOR(0 | 1) is 0 NOR(0 | 0) is 1 Bitwise ^ 1 ^ 1 is 0 1 ^ 0 is 1 0 ^ 1 is 1 0 ^ 0 is 0 . Truth Table - Algorithm 2 . This algorithm above seemed to me to lose clarity with all the functions. The second attempt focuses on truth tables as a linear sequence, with loops for required repetitions. This seemed more understandable to me than my 1st attempt. . def method2(): truth_table = [[1,1], [1,0], [0,1], [0,0]] for a, b in truth_table: print(f&quot;and {a} &amp; {b}: {a &amp; b}&quot;) for a, b in truth_table: print(f&quot;nand ~({a} &amp; {b}): {((a &amp; b) + 1) % 2}&quot;) # warning: ~ negates entire integer without modulo for a, b in truth_table: print(f&quot;or {a} | {b}: {a | b}&quot;) for a, b in truth_table: print(f&quot;nor ~({a} | {b}): {((a | b) + 1) % 2}&quot;) # warning: see above for a, b in truth_table: print(f&quot;xor {a} ^ {b}: {a ^ b}&quot;) # call bitwise evaluation of truth table if __name__ == &quot;__main__&quot;: print(&quot;***** Method 2 *****&quot;) method2() . ***** Method 2 ***** and 1 &amp; 1: 1 and 1 &amp; 0: 0 and 0 &amp; 1: 0 and 0 &amp; 0: 0 nand ~(1 &amp; 1): 0 nand ~(1 &amp; 0): 1 nand ~(0 &amp; 1): 1 nand ~(0 &amp; 0): 1 or 1 | 1: 1 or 1 | 0: 1 or 0 | 1: 1 or 0 | 0: 0 nor ~(1 | 1): 0 nor ~(1 | 0): 0 nor ~(0 | 1): 0 nor ~(0 | 0): 1 xor 1 ^ 1: 0 xor 1 ^ 0: 1 xor 0 ^ 1: 1 xor 0 ^ 0: 0 . Linear Sequence of code . The order of executions is strictly from top to bottom. This is good for learning, but is typically a poor method for an Algorithm! This was my 1st exploration above. . Procedure (Function) . A Procedure is a set of code instructions that has been abstracted into logical parts. Each code abstraction is called &quot;Procedural Abstraction&quot;. . In Python, using procedures (def) means you are starting to write &quot;good&quot; code vs &quot;bad&quot; code, mostly in terms of reusability of logic. | A procedure needs to be activated or called, this is performed in the main selections above. | . Hacks . As we explore the algorithm Unit students will be designing lessons and homework. Each lesson will have Hacks. Here are some hacks that could go with the lesson above. The three weeks after Thanksgiving will be focused on this activity and build personal portfolio. . Try to build a Truth Table as shown above in Python, but switch to JavaScript... . Begin by showing understanding of problem using console.log, this problem can be done in Jupyter Notebook | Build a Truth Table in JavaScript showing output in HTML, this problem is best in FastPages | . Pick your Algorithmic hack, build in Python and JavaScript. Here are some ideas.. . Binary to Hexadecimal to Decimal conversions | Fibonacci | Palindrome | Other | . Come up with a Procedure/Function that show... . Data Abstraction | Procedural Abstraction | Algorithm using iteration and selection | Frontend / Backend, using an API and persistent storage | .",
            "url": "https://teambrobro.github.io/TeamBroBro/2022/11/07/AP-logic-and-algos.html",
            "relUrl": "/2022/11/07/AP-logic-and-algos.html",
            "date": " • Nov 7, 2022"
        }
        
    
  
    
        ,"post1": {
            "title": "Title",
            "content": "",
            "url": "https://teambrobro.github.io/TeamBroBro/2022/10/25/js-test.html",
            "relUrl": "/2022/10/25/js-test.html",
            "date": " • Oct 25, 2022"
        }
        
    
  
    
        ,"post2": {
            "title": "Likes/Dislikes Demo",
            "content": "Pop Music . Like 0 . Dislike 0 . .",
            "url": "https://teambrobro.github.io/TeamBroBro/fastpages/markdown/html/api/2022/10/24/test.html",
            "relUrl": "/fastpages/markdown/html/api/2022/10/24/test.html",
            "date": " • Oct 24, 2022"
        }
        
    
  
    
        ,"post3": {
            "title": "Javascript Inputs using a Grade Calculator",
            "content": "The code segment below builds the container for the output and input for the grade calculator. . Read more here . &lt;div class=&quot;container bg-primary&quot;&gt; &lt;header class=&quot;pb-3 mb-4 border-bottom border-primary text-dark&quot;&gt; &lt;span class=&quot;fs-4&quot;&gt;Grade Calculator&lt;/span&gt; &lt;/header&gt; &lt;form&gt; &lt;!-- Totals --&gt; &lt;div class=&quot;form-group row&quot;&gt; Total : &lt;span id=&quot;total&quot; class=&quot;label label-primary&quot;&gt;0.0&lt;/span&gt; Count : &lt;span id=&quot;count&quot; class=&quot;label label-primary&quot;&gt;0.0&lt;/span&gt; Average : &lt;span id=&quot;average&quot; class=&quot;label label-primary&quot;&gt;0.0&lt;/span&gt; &lt;/div&gt; &lt;!-- Rows --&gt; &lt;div class=&quot;form-group row&quot;&gt; Input scores, press tab to add new number: &lt;div id=&quot;scores&quot;&gt; &lt;input onblur=&quot;calculator()&quot; type=&quot;text&quot; name=&quot;score&quot; id=&quot;score0&quot;/&gt;&lt;br&gt; &lt;!-- javascript generated inputs --&gt; &lt;/div&gt; &lt;/div&gt; &lt;/form&gt; &lt;/div&gt; . The code below creates the function that creates a new input line. . Additional Resources: . Create Element | Set Attribute | . const scoresContainer = document.getElementById(&quot;scores&quot;); // Creates new input line function newInputLine(index) { // Prepare new input line var input = document.createElement(&quot;input&quot;); // input element var br = document.createElement(&quot;br&quot;); // line break element // Setup input line attributes input.setAttribute(&#39;onblur&#39;, &quot;calculator()&quot;); input.setAttribute(&#39;type&#39;, &quot;text&quot;); input.setAttribute(&#39;name&#39;, &quot;score&quot;); input.setAttribute(&#39;id&#39;, &quot;score&quot; + index); // Add input and line break to page scoresContainer.appendChild(input); scoresContainer.appendChild(br); } . The code below creates the function calculator which stores and calculates the total, count, and average of the user inputs. . Additional Resources: . Get Elements by ID | Get Elements by Name | . // Calculates totals function calculator(){ var array = document.getElementsByName(&#39;score&#39;); // setup array of scores if (array[array.length-1].value.length != 0) { // input cell has a value // algorithm to calculate results var total = 0; // running total for(var i = 0; i &lt; array.length; i++){ // iterate through array if(parseFloat(array[i].value)) // convert to float total += parseFloat(array[i].value); // add to running total } // update totals document.getElementById(&#39;total&#39;).innerHTML = total.toFixed(2); document.getElementById(&#39;count&#39;).innerHTML = array.length; document.getElementById(&#39;average&#39;).innerHTML = (total / array.length).toFixed(2); // make a new input line newInputLine(array.length); } // Set cursor focus on last element; this could be new or unchanged element document.getElementById(&quot;score&quot; + (array.length-1)).focus(); } . Hacks . Getting a user input can be useful in other ways: . Looking for a single element in an API, ie Stock in Stock API or BTC in digital coin API, or City in Weather API | Record name, then you could use name input to retrieve something about them from multiple RapidAPI. | Save name and input, like grades, and send data to backend to be recorded, saved, and then retrieved when they enter name on next usage | .",
            "url": "https://teambrobro.github.io/TeamBroBro/techtalk/javascriptinput",
            "relUrl": "/techtalk/javascriptinput",
            "date": " • Oct 24, 2022"
        }
        
    
  
    
        ,"post4": {
            "title": "Title",
            "content": "",
            "url": "https://teambrobro.github.io/TeamBroBro/2022/10/24/SET-1.html",
            "relUrl": "/2022/10/24/SET-1.html",
            "date": " • Oct 24, 2022"
        }
        
    
  
    
        ,"post5": {
            "title": "Title",
            "content": "",
            "url": "https://teambrobro.github.io/TeamBroBro/2022/10/24/Python-API-JOKES.html",
            "relUrl": "/2022/10/24/Python-API-JOKES.html",
            "date": " • Oct 24, 2022"
        }
        
    
  
    
        ,"post6": {
            "title": "Fetch of Backend Jokes",
            "content": "| Overview | Covid19 RapidAPI | Jokes API | Users Database | . Joke HaHa Boohoo .",
            "url": "https://teambrobro.github.io/TeamBroBro/data/jokes",
            "relUrl": "/data/jokes",
            "date": " • Oct 24, 2022"
        }
        
    
  
    
        ,"post7": {
            "title": "Python API JOKES formatting.",
            "content": "import requests # Allows you to get data from API url = &quot;https://flask.nighthawkcodingsociety.com/api/jokes/&quot; # Defines URL response = requests.get(url) # Using the requests.get(url) I can pull the requests from the URL data = response.json() # Puts Jsonified data into a variable and formats it for entry in data: print(f&#39;{entry[&quot;joke&quot;]} n boohoo count: {entry[&quot;boohoo&quot;]} n haha count: {entry[&quot;haha&quot;]}&#39;) # For each joke, an &quot;entry&quot; has the joke in it # n puts it on a new line . If you give someone a program... you will frustrate them for a day; if you teach them how to program... you will frustrate them for a lifetime. boohoo count: 421122 haha count: 186709 Q: Why did I divide sin by tan? A: Just cos. boohoo count: 5504 haha count: 30466 UNIX is basically a simple operating system... but you have to be a genius to understand the simplicity. boohoo count: 1379 haha count: 1876 Enter any 11-digit prime number to continue. boohoo count: 1345 haha count: 1635 If at first you don&#39;t succeed; call it version 1.0. boohoo count: 1782 haha count: 2099 Java programmers are some of the most materialistic people I know, very object-oriented boohoo count: 5129 haha count: 1342 The oldest computer can be traced back to Adam and Eve. It was an apple but with extremely limited memory. Just 1 byte. And then everything crashed. boohoo count: 1824 haha count: 1147 Q: Why did Wi-Fi and the computer get married? A: Because they had a connection boohoo count: 2439 haha count: 3078 Bill Gates teaches a kindergarten class to count to ten. 1, 2, 3, 3.1, 95, 98, ME, 2000, XP, Vista, 7, 8, 10. boohoo count: 31295 haha count: 1341 Q: What’s a aliens favorite computer key? A: the space bar! boohoo count: 2135 haha count: 1540 There are 10 types of people in the world: those who understand binary, and those who don’t. boohoo count: 17141 haha count: 1773 If it wasn&#39;t for C, we’d all be programming in BASI and OBOL. boohoo count: 1320 haha count: 1781 Computers make very fast, very accurate mistakes. boohoo count: 1805 haha count: 1125 Q: Why is it that programmers always confuse Halloween with Christmas? A: Because 31 OCT = 25 DEC. boohoo count: 1244 haha count: 1161 Q: How many programmers does it take to change a light bulb? A: None. It’s a hardware problem. boohoo count: 1463 haha count: 1475 The programmer got stuck in the shower because the instructions on the shampoo bottle said: Lather, Rinse, Repeat. boohoo count: 1218 haha count: 4274 Q: What is the biggest lie in the entire universe? A: I have read and agree to the Terms and Conditions. boohoo count: 1122 haha count: 2058 An SQL statement walks into a bar and sees two tables. It approaches, and asks may I join you? boohoo count: 4610 haha count: 1001885 .",
            "url": "https://teambrobro.github.io/TeamBroBro/2022/10/23/Python-Jokes-Api.html",
            "relUrl": "/2022/10/23/Python-Jokes-Api.html",
            "date": " • Oct 23, 2022"
        }
        
    
  

  
  

  

  
      ,"page2": {
          "title": "About",
          "content": "Scrum Master Dev Ops Dev Ops Front End Front End . Ethan Tran | Parav Salaniwal | Rohin Sood | Luna Iwazaki | Taiyo Iwazaki | .",
          "url": "https://teambrobro.github.io/TeamBroBro/about/",
          "relUrl": "/about/",
          "date": ""
      }
      
  

  

  

  
  

  
  

  
  

  
  

  
  

  
      ,"page10": {
          "title": "",
          "content": "Sitemap: {{ “sitemap.xml” | absolute_url }} | .",
          "url": "https://teambrobro.github.io/TeamBroBro/robots.txt",
          "relUrl": "/robots.txt",
          "date": ""
      }
      
  

}